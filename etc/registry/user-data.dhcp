#cloud-config

hostname: {HOSTNAME}
users:
  - name: root
    gecos: Jimmy Xu
    groups: root
    lock_passwd: false
    shell: /bin/bash
    sudo: ALL=(ALL) NOPASSWD:ALL
    #generate passwd: mkpasswd --method=SHA-512 --rounds=4096 (plain passwd: aaa123aa)
    passwd: $6$rounds=4096$LiIq3Q3/c64erfZ4$bWHRJl.sjWTmUp01sCJBGM5tRMnx43ikjF3ckbvl75Fswbgdl1v1mgveD3fCP4W1q.rWbrt6BTiofcHnG3KFP/
    ssh_authorized_keys:
      - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCp4xR1QBtsBW56Cws4T1ZeyqLEz749qzf06DxQxPblcuMA5+RaC7pTtvbfQAOD2Qyjn1yxRtA0gOwIQcmG7RS4wW817IBvIZCfZG8HIuRl53iUnmRHFHRF+F9xOSOf2NnWtLbRhJwCxxbYo6RfjdxglGfLtZQ3bgx+tAIaB7v6sZkvpxX469dmYxPu2jEbSBVSgPC6Ih7jfrkF4SUN67EyhntQt2EzMI1pZ1kX41ytxE9zjuKp/r3D8NiBu1zlbBsBf/+OJWnjZwL5vjx73nze6ntqus7STmkZMVUh9B+dDKNUtO2O2Q/Otm/aDw3PKiDU6a+rJQ89w6jnRIfcbpnr root@mini-ubuntu

bootcmd:
    - echo "===== bootcmd ====="
    - /bin/sed -i "/127.0.0.1 /d" /etc/hosts
    - echo "127.0.0.1 localhost" >> /etc/hosts
    - echo "127.0.0.1 {HOSTNAME}" >> /etc/hosts
    - echo "127.0.0.1 registry.hyper.sh" >> /etc/hosts
    - hostname {HOSTNAME}
    - echo "bootcmd:$(date +'%F %T')" > /tmp/run.log
    - echo "===== bootcmd  ====="

write_files:
  - content: |
        ## some more ls aliases
        alias grep='grep --color=auto'
        alias ls='ls --color=auto'
        alias ll='ls -alF'
        alias la='ls -A'
        alias l='ls -CF'
        ## prompt
        PMT=""; if [  $UID -eq 0 ];then PMT="#" ;else PMT="$" ; fi
        WHITE="\[\033[0m\]" 
        YELLOW="\[\033[0;33m\]"
        GREEN="\[\033[0;32;40m\]"
        RED="\[\033[0;31;40m\]"
        BLUE="\[\033[1;34m\]"
        LGREEN="\[\033[1;32;40m\]"
        export PS1="[$LGREEN\u@\h $BLUE\W$WHITE:$YELLOW\$(git branch 2>/dev/null | grep '^*' | colrm 1 2)$WHITE]"$PMT 
        ## proxy
        #export http_proxy=http://{HOST_IP}:8118
        #export https_proxy=https://{HOST_IP}:8118
        #export no_proxy=localhost,127.0.0.0/8,::1,/var/run/docker.sock,mirrors.163.com
        ## PATH
        export PATH=/usr/local/bin:${PATH}
    path: /root/.bashrc
    permissons: 0755
  - content: |
        user www www;
        worker_processes  1;
        error_log  /var/log/nginx/error.log error;
        pid        /var/run/nginx.pid;
        worker_rlimit_nofile 51200;
        events {
            worker_connections  51200;
            use epoll;
            multi_accept on;
        }
        http {
            include       /etc/nginx/mime.types;
            default_type  application/octet-stream;
            log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                              '$status $body_bytes_sent "$http_referer" '
                              '"$http_user_agent" "$http_x_forwarded_for"';

            access_log  /var/log/nginx/access.log  main;
            server_names_hash_bucket_size 128;
            client_header_buffer_size 32k;
            large_client_header_buffers 4 32k;
            tcp_nodelay     on;           
            upstream registry {
                server 127.0.0.1:5000;
            }
            sendfile       on;
            tcp_nopush     on;
            keepalive_timeout  65;
            gzip  on;
            include /etc/nginx/conf.d/*.conf;
        }
    path: /etc/nginx/nginx.conf
    permissions: 0644
  - content: |
        server {
            listen       443;
            server_name  localhost;
            ssl   on;
            ssl_certificate     /etc/nginx/ssl/nginx.crt;
            ssl_certificate_key /etc/nginx/ssl/nginx.key;
            chunked_transfer_encoding on;
            location /v2/ {
                if ($http_user_agent ~ "^(docker\/1\.(3|4|5(?!\.[0-9]-dev))|Go ).*\$" ) {
                    return 404;
                }
                auth_basic "registry";
                auth_basic_user_file /etc/nginx/.htpasswd;
                add_header 'Docker-Distribution-Api-Version' 'registry/2.0' always;
                proxy_pass       http://registry;
                proxy_set_header  Host              $http_host;
                proxy_set_header  X-Real-IP         $remote_addr;
                proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;
                proxy_set_header  X-Forwarded-Proto $scheme;
                proxy_read_timeout                  900;
            }
            location /_ping {
                auth_basic off;
                proxy_pass http://registry;
            }
            location /v1/_ping {
                auth_basic off;
                proxy_pass http://registry;
            }
            location / {
                root   /usr/share/nginx/html;
                index  index.html index.htm;
            }
            error_page   500 502 503 504  /50x.html;
            location = /50x.html {
                root   /usr/share/nginx/html;
            }
        }
    path: /etc/nginx/conf.d/default.conf
    permissions: 0644
  - content: |
        version: 0.1
        log:
          level: debug
          formatter: text
          fields:
            service: registry
            environment: staging
        storage:
          oss:
            accesskeyid: <your oss access id>
            accesskeysecret: <your oss access key>
            region: oss-cn-beijing #由您oss仓库隶属的区域决定，这边以北京为例
            bucket: <your oss bucket>
            rootdirectory: <root diectory>(optional) #用于存储的根路径，默认为空，则存储在 oss bucket下
          delete:
            enabled: false
          redirect:
            disable: false
          cache:
            blobdescriptor: inmemory #缓存方式，有两种选择，一种 in memory，另一种 redis
          maintenance:
            uploadpurging:
              enabled: true
              age: 168h
              interval: 24h
              dryrun: false
        http:
          addr: 0.0.0.0:5000
          debug:
            addr: 0.0.0.0:5001
          headers:
            X-Content-Type-Options: [nosniff]
    path: /root/config.yml
    permissions: 0644
  - content: |
        Host github.com
        StrictHostKeyChecking no
    path: /root/.ssh/config
    permissions: 0644

runcmd:
    - echo "===== runcmd ====="
    - ping -c3 {HOST_IP}
    - echo "runcmd :$(date +'%F %T')" >> /tmp/run.log
    - netstat -tnopl
    - ps -ef | grep sshd
    - service sshd status
    - ifconfig
    - ip route
    - echo "===== runcmd ====="

final_message: "VM started..."
